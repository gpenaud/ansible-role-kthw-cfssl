
- name: download cfssl binary
  become: yes
  get_url:
    url: https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssl
    dest: /usr/local/bin/cfssl
    mode: 0740

- name: download cfssljson binary
  become: yes
  get_url:
    url: https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssljson
    dest: /usr/local/bin/cfssljson
    mode: 0740

- name: create PKI local directory
  become: yes
  file:
    path: /usr/share/ca-certificates/kthw
    state: directory

# ca pems
# ------------------------------------------------------------------------------

- name: templates out ca csr and config
  become: yes
  template:
    src: "{{ item }}.j2"
    dest: "/usr/share/ca-certificates/kthw/{{ item }}"
  loop:
    - ca-config.json
    - ca-csr.json

- name: generate ca and ca key pems
  become: yes
  shell: |-
    cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  args:
    chdir: /usr/share/ca-certificates/kthw

# admin pems
# ------------------------------------------------------------------------------

- name: templates out admin csr
  become: yes
  template:
    src: admin-csr.json.j2
    dest: /usr/share/ca-certificates/kthw/admin-csr.json

- name: generate admin and admin key pems
  become: yes
  shell: |-
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
  args:
    chdir: /usr/share/ca-certificates/kthw


# nodes pems
# ------------------------------------------------------------------------------

- include: node.yml
  loop: "{{ groups['nodes'] }}"
  loop_control:
    loop_var: node

# kube-controller-manager pems
# ------------------------------------------------------------------------------

- name: templates out kube-controller-manager csr
  become: yes
  template:
    src: kube-controller-manager-csr.json.j2
    dest: /usr/share/ca-certificates/kthw/kube-controller-manager-csr.json

- name: generate kube-controller-manager and kube-controller-manager key pems
  become: yes
  shell: |-
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
  args:
    chdir: /usr/share/ca-certificates/kthw

# kube-proxy pems
# ------------------------------------------------------------------------------

- name: templates out kube-proxy csr
  become: yes
  template:
    src: kube-proxy-csr.json.j2
    dest: /usr/share/ca-certificates/kthw/kube-proxy-csr.json

- name: generate kube-proxy and kube-proxy key pems
  become: yes
  shell: |-
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
  args:
    chdir: /usr/share/ca-certificates/kthw

# kube-scheduler pems
# ------------------------------------------------------------------------------

- name: templates out kube-scheduler csr
  become: yes
  template:
    src: kube-scheduler-csr.json.j2
    dest: /usr/share/ca-certificates/kthw/kube-scheduler-csr.json

- name: generate kube-scheduler and kube-scheduler key pems
  become: yes
  shell: |-
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
  args:
    chdir: /usr/share/ca-certificates/kthw

# kubernetes API server pems
# ------------------------------------------------------------------------------

- name: templates out kubernetes csr
  become: yes
  template:
    src: kubernetes-csr.json.j2
    dest: /usr/share/ca-certificates/kthw/kubernetes-csr.json

- name: generate kubernetes and kubernetes key pems
  become: yes
  shell: |-
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{ k8s_internal_cluster_service_range_first_ip }},{{ groups['masters'] | map('extract', hostvars, 'ip') | join(',') }},127.0.0.1,{{ k8s_hostnames | join(',') }} -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
  args:
    chdir: /usr/share/ca-certificates/kthw

# service-account pems
# ------------------------------------------------------------------------------

- name: templates out service-account csr
  become: yes
  template:
    src: service-account-csr.json.j2
    dest: /usr/share/ca-certificates/kthw/service-account-csr.json

- name: generate service-account and service-account key pems
  become: yes
  shell: |-
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes service-account-csr.json | cfssljson -bare service-account
  args:
    chdir: /usr/share/ca-certificates/kthw

# ------------------------------------------------------------------------------
# remove csr files
# ------------------------------------------------------------------------------

- name: remove csr files
  become: yes
  shell: |-
    rm -rf *json *csr *csr.json
  args:
    chdir: /usr/share/ca-certificates/kthw
    warn: no

# ------------------------------------------------------------------------------
# copy pems to masters
# ------------------------------------------------------------------------------

- name: copy pems to masters
  delegate_to: "{{ item.0 }}"
  become: yes
  copy:
    src: "/usr/share/ca-certificates/kthw/{{ item.1 }}"
    dest: /root
    mode: 0644
  with_nested:
    - "{{ groups['masters'] }}"
    - "{{ pems }}"
  vars:
    pems:
      - ca.pem
      - ca-key.pem
      - kubernetes-key.pem
      - kubernetes.pem
      - service-account-key.pem
      - service-account.pem
